version: '3.9'

services:
  postgres:
    image: postgres:15
    container_name: my_postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypass
      POSTGRES_DB: attachments
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d attachments"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: my_rabbitmq
    restart: always
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5

  nestjs:
    build:
      context: .
      target: builder # Use builder stage which has dev dependencies
    container_name: my_nestjs
    restart: always
    ports:
      - "5000:5000"
    environment:
      DATABASE_URL: postgres://myuser:mypass@postgres:5432/attachments
      JWT_ACCESS_SECRET: your-super-secret-jwt-access-key-here
      JWT_REFRESH_SECRET: your-super-secret-jwt-refresh-key-here
      JWT_ACCESS_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d

      THROTTLE_TTL: 60000
      THROTTLE_LIMIT: 100
      
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      RABBITMQ_QUEUE_NAME: auth_queue
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
      - /app/generated
    command: sh -c "npx prisma generate && npx prisma db push && npx nest start --watch"

volumes:
  pgdata:
  rabbitmq_data:
